import asyncio
import logging
import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict, deque
import time

class TelegramBot:
    def __init__(self, TOKEN, API_URL, DB_CONFIG, log_file='bot.log'):
        self.TOKEN = TOKEN
        self.API_URL = API_URL
        self.DB_CONFIG = DB_CONFIG
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s"
        )
        self.bot = Bot(token=self.TOKEN)
        self.dp = Dispatcher()
        self.dp.message.register(self.start, Command("start"))
        self.dp.message.register(self.process_message)
        self.dp.callback_query.register(self.feedback_callback)
        self.last_feedback_messages = dict()  # –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
        self.user_requests = defaultdict(lambda: deque()) # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.rate_limit_count = 10         # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.rate_limit_seconds = 30    # –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def db_connect(self):
        return await asyncpg.connect(**self.DB_CONFIG)
    
    async def save_feedback(self, chat_id, message, model_response, feedback):
        conn = await self.db_connect()
        await conn.execute(
        """
        INSERT INTO model_evaluation (chat_id, message, model_response, feedback)
        VALUES ($1, $2, $3, $4);
        """,
        chat_id, message, model_response, feedback
        )
        await conn.close()

    async def start(self, message: types.Message):
        user_id = message.chat.id
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    async def process_message(self, message: types.Message):
        user_id = message.chat.id
        text = message.text
        MAX_WORDS = 60
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Å–ª–æ–≤
        if text and len(text.split()) > MAX_WORDS:
            await message.answer(f"‚ö†Ô∏è –í—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_WORDS} —Å–ª–æ–≤.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        elif not text:
            await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        if self.check_limit(user_id):
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            return      
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        last_msg = self.last_feedback_messages.get(user_id)

        if last_msg:
            try:
                await last_msg.edit_reply_markup(reply_markup=None)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
            finally:
                self.last_feedback_messages[user_id] = None

        response_text = await self.query_model(text)
        if response_text:
            sent_message = await message.answer(response_text)
            await self.save_feedback(user_id, text, response_text, None)
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üëç", callback_data=f"feedback:{sent_message.message_id}:true"),
                     InlineKeyboardButton(text="üëé", callback_data=f"feedback:{sent_message.message_id}:false")]
                ]
            )
            feedback_prompt = await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=keyboard)
            #self.last_feedback_message = feedback_prompt
            self.last_feedback_messages[user_id] = feedback_prompt
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    async def feedback_callback(self, call: types.CallbackQuery):
        user_id = call.message.chat.id
        _, message_id, feedback_value = call.data.split(":")
        feedback_value = feedback_value == "true"
        conn = await self.db_connect()
        await conn.execute(
            """
            UPDATE model_evaluation
            SET feedback = $1
            WHERE id = (
                SELECT id FROM model_evaluation
                WHERE chat_id = $2 AND feedback IS NULL
                ORDER BY id DESC
                LIMIT 1
            );
            """,
            feedback_value, user_id
        )
        await conn.close()
        #await call.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –µ—â—ë")
        await call.message.edit_reply_markup(reply_markup=None)
    
    async def query_model(self, text):
        payload = {"text_list": [text]}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.API_URL, json=payload, headers={"Content-Type": "application/json"}) as response:
                    response.raise_for_status()
                    result = await response.json()
                    #return result[0][0]
                    if result and result[0]:
                        return ", ".join(str(item) for item in set(result[0]))
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                        return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    def check_limit(self, user_id):
        now = time.time()
        queue = self.user_requests[user_id]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        while queue and now - queue[0] > self.rate_limit_seconds:
            queue.popleft()

        if len(queue) >= self.rate_limit_count:
            return True
        else:
            queue.append(now)
            return False

    async def run(self):
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        await self.dp.start_polling(self.bot)

if __name__ == "__main__":
    TOKEN = ""
    API_URL = "http://127.0.0.1:8888/predict_on_text"
    DB_CONFIG = {
        "database": "kitoboy_db",         # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        "user": "kitoboy_user",         # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "password": "",   # –ü–∞—Ä–æ–ª—å
        "host": "127.0.0.1",           # –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        "port": "5432"            # –ü–æ—Ä—Ç PostgreSQL
        }
    bot = TelegramBot(TOKEN, API_URL, DB_CONFIG)
    asyncio.run(bot.run())
